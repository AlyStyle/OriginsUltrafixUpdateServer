// ----------------------------------
// RSDK Project: Sonic 1 (SO UF)
// Script Description: Config Screen Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.timer
private alias object.value1 : object.bgBoxSize.x
private alias object.value2 : object.bgBoxSize.y
private alias object.value3 : object.selection
private alias object.value4 : object.isClassicLvlSel

private alias object.value6  : object.SpindashOffSelected
private alias object.value7  : object.SpindashOnSelected
private alias object.value8  : object.GndcapOffSelected
private alias object.value9  : object.GndcapOnSelected
private alias object.value10  : object.SpdcapOffSelected
private alias object.value11  : object.SpdcapOnSelected
private alias object.value12  : object.SpikeOffSelected
private alias object.value13  : object.SpikeOnSelected
private alias object.value14  : object.prevItemsSelected
private alias object.value15  : object.nextItemsSelected
private alias object.value16  : object.Emerald6Selected
private alias object.value17  : object.Emerald7Selected
private alias object.value18 : object.okSelected

// States
private alias 0 : CONFIGSCREEN_SETUP
private alias 1 : CONFIGSCREEN_ENTERMENU
private alias 2 : CONFIGSCREEN_APPEAR
private alias 3 : CONFIGSCREEN_SELECTING
private alias 4 : CONFIGSCREEN_SELECTEDDELAY
private alias 5 : CONFIGSCREEN_DISAPPEAR
private alias 6 : CONFIGSCREEN_EXITMENU

// Selection IDs
private alias 0 : CONFIGSCREEN_SEL_NONE
private alias 1 : CONFIGSCREEN_SEL_SPINDASH
private alias 2 : CONFIGSCREEN_SEL_GNDSPDCAP
private alias 3 : CONFIGSCREEN_SEL_AIRSPDCAP
private alias 4 : CONFIGSCREEN_SEL_S1SPIKES
private alias 5 : CONFIGSCREEN_SEL_ITEMS
private alias 6 : CONFIGSCREEN_SEL_EMERALDS
private alias 7 : CONFIGSCREEN_SEL_OK

// Shield Types Aliases
private alias 0 : SHIELDTYPE_S1
private alias 1 : SHIELDTYPE_S2
private alias 2 : SHIELDTYPE_S3_S1
private alias 3 : SHIELDTYPE_S3_S2

// ========================
// Function Declarations
// ========================

reserve function ConfigScreen_SetPlayer


// ========================
// Function Definitions
// ========================

// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case CONFIGSCREEN_SETUP
		object.inkEffect = INK_ALPHA
		object.alpha 	 = 0x00
		object.drawOrder = 6
					
		object.state++
		break

	case CONFIGSCREEN_ENTERMENU
		temp0 = 198
		temp0 -= object.bgBoxSize.x
		temp0 >>= 3
		object.bgBoxSize.x += temp0

		temp0 = 216
		temp0 -= object.bgBoxSize.y
		temp0 >>= 3
		object.bgBoxSize.y += temp0

		if object.bgBoxSize.x >= 188
			object.bgBoxSize.x = 188
			object.bgBoxSize.y = 208
			object.state++
		end if
		break

	case CONFIGSCREEN_APPEAR
		if object.alpha < 0x100
			object.alpha += 0x10
		else
			// this sometimes evaluates to false in Origins for some reason...
			options.physicalControls = true
			//if options.physicalControls == true
				object.selection = CONFIGSCREEN_SEL_SPINDASH
			//else
			//	object.selection = CONFIGSCREEN_SEL_NONE
			//end if
			object.state++
		end if
		break

	case CONFIGSCREEN_SELECTING
		if options.physicalControls == true
			if keyPress[0].up == true
				object.selection--
				if object.selection < CONFIGSCREEN_SEL_SPINDASH
					object.selection = CONFIGSCREEN_SEL_OK
				end if
				PlaySfx(SfxName[Menu Move], false)
			end if

			if keyPress[0].down == true
				object.selection++
				if object.selection > CONFIGSCREEN_SEL_OK
					object.selection = CONFIGSCREEN_SEL_SPINDASH
				end if

				PlaySfx(SfxName[Menu Move], false)
			end if

			switch object.selection

			case CONFIGSCREEN_SEL_SPINDASH
				if keyPress[0].left == true
					options.spindash ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.spindash ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_GNDSPDCAP
				if keyPress[0].left == true
					options.speedcap ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.speedcap ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_AIRSPDCAP
				if keyPress[0].left == true
					options.airSpeedCap ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.airSpeedCap ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_S1SPIKES
				if keyPress[0].left == true
					options.spikeBehavior ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.spikeBehavior ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_S1SPIKES
				if keyPress[0].left == true
					options.spikeBehavior ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.spikeBehavior ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_ITEMS
				if keyPress[0].left == true
					options.shieldType--
					if options.shieldType < SHIELDTYPE_S1
						options.shieldType = SHIELDTYPE_S3_S2
					end if
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.shieldType++
					if options.shieldType > SHIELDTYPE_S3_S2
						options.shieldType = SHIELDTYPE_S1
					end if
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_EMERALDS
				if keyPress[0].left == true
					options.superStates ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if

				if keyPress[0].right == true
					options.superStates ^= 1
					PlaySfx(SfxName[Menu Move], false)
				end if
				break

			case CONFIGSCREEN_SEL_OK
				if keyPress[0].buttonA == true
					object.state = CONFIGSCREEN_SELECTEDDELAY
					PlaySfx(SfxName[Menu Select], false)
				end if

				if keyPress[0].start == true
					object.state = CONFIGSCREEN_SELECTEDDELAY
					PlaySfx(SfxName[Menu Select], false)
				end if
				break
			end switch

			if keyPress[0].buttonB == true
				object.state = CONFIGSCREEN_DISAPPEAR
				PlaySfx(SfxName[Menu Back], false)
			end if

			if object.state == CONFIGSCREEN_SELECTING
				CheckTouchRect(0, 0, screen.xsize, screen.ysize)
				if checkResult > -1
					options.physicalControls = false
					object.selection = CONFIGSCREEN_SEL_NONE
				end if
			end if
		else
			CheckTouchRect(0, 0, screen.xsize, screen.ysize)
			if checkResult > -1
			else
				if object.SpindashOnSelected == true
					object.SpindashOnSelected = false
					options.Spindash = true
					PlaySfx(SfxName[Menu Move], false)
				end if

				if object.SpindashOffSelected == true
					object.SpindashOffSelected = false
					options.Spindash = false
					PlaySfx(SfxName[Menu Move], false)
				end if

				if object.GndcapOnSelected == true
					object.GndcapOnSelected = false
					options.speedCap = true
					PlaySfx(SfxName[Menu Move], false)
				end if

				if object.GndcapOffSelected == true
					object.GndcapOffSelected = false
					options.speedCap = false
					PlaySfx(SfxName[Menu Move], false)
				end if


				if object.okSelected == true
					object.okSelected = false
					object.state = CONFIGSCREEN_SELECTEDDELAY
					PlaySfx(SfxName[Menu Select], false)
				end if
			end if

			if keyPress[0].buttonB == true
				object.state = CONFIGSCREEN_DISAPPEAR
				PlaySfx(SfxName[Menu Back], false)
			end if

			if object.state == CONFIGSCREEN_SELECTING
				if keyPress[0].up == true
					options.physicalControls = true
					object.selection = CONFIGSCREEN_SEL_OK
				end if

				if keyPress[0].down == true
					options.physicalControls = true
					object.selection = CONFIGSCREEN_SEL_SPINDASH
				end if
			end if
		end if
		break

	case CONFIGSCREEN_SELECTEDDELAY
		if object.timer < 32
			object.timer++
		else
			object.timer = 0
			object.state++
		end if
		break

	case CONFIGSCREEN_DISAPPEAR
		if object.alpha > 0
			object.alpha -= 16
		else
			object.state++
		end if
		break

	case CONFIGSCREEN_EXITMENU
		temp0 = 0
		temp0 -= object.bgBoxSize.x
		temp0 >>= 3
		object.bgBoxSize.x += temp0

		temp0 = 0
		temp0 -= object.bgBoxSize.y
		temp0 >>= 3
		object.bgBoxSize.y += temp0

		if object.bgBoxSize.x < 4
			object.bgBoxSize.x = 0
			object.bgBoxSize.y = 0
			MenuControl_optionsMenuOpen = false
			ResetObjectEntity(object.entityPos, TypeName[Blank Object], 0, 0, 0)
		end if
		break
		
	end switch
end event


event ObjectDraw
	if object.isClassicLvlSel == true
		SetActivePalette(2, 0, screen.ysize)
	end if

	temp0 = object.bgBoxSize.x
	temp0 >>= 1
	FlipSign(temp0)
	temp0 += screen.xcenter
	temp1 = object.bgBoxSize.y
	temp1 >>= 1
	FlipSign(temp1)
	temp1 += screen.ycenter
	DrawRect(temp0, temp1, object.bgBoxSize.x, object.bgBoxSize.y, 0x00, 0x00, 0x60, 0xFF)

	temp0 += 2
	temp1 += 2
	temp2 = object.bgBoxSize.x
	temp2 -= 4
	temp3 = object.bgBoxSize.y
	temp3 -= 4
	DrawRect(temp0, temp1, temp2, temp3, 0x00, 0x20, 0xC0, 0xFF)

	DrawSpriteScreenFX(0, FX_INK, screen.xcenter, 25)

	temp5 = 46
	if object.selection == CONFIGSCREEN_SEL_SPINDASH
		DrawSpriteScreenFX(2, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(1, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.SpindashOnSelected == true
		DrawSpriteScreenFX(14, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(13, FX_INK, screen.xcenter, temp5)
	end if

	if object.SpindashOffSelected == true
		DrawSpriteScreenFX(16, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(15, FX_INK, screen.xcenter, temp5)
	end if

	if options.spindash == true
		DrawSpriteScreenFX(19, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(20, FX_INK, screen.xcenter, temp5)
	end if
	temp5 += 3

	temp5 += 25
	if object.selection == CONFIGSCREEN_SEL_GNDSPDCAP
		DrawSpriteScreenFX(4, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(3, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.GndcapOnSelected == true
		DrawSpriteScreenFX(14, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(13, FX_INK, screen.xcenter, temp5)
	end if

	if object.GndcapOffSelected == true
		DrawSpriteScreenFX(16, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(15, FX_INK, screen.xcenter, temp5)
	end if

	if options.speedcap == true
		DrawSpriteScreenFX(19, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(20, FX_INK, screen.xcenter, temp5)
	end if
	temp5 += 3

	temp5 += 25
	if object.selection == CONFIGSCREEN_SEL_AIRSPDCAP
		DrawSpriteScreenFX(6, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(5, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.SpdcapOnSelected == true
		DrawSpriteScreenFX(14, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(13, FX_INK, screen.xcenter, temp5)
	end if

	if object.SpdcapOffSelected == true
		DrawSpriteScreenFX(16, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(15, FX_INK, screen.xcenter, temp5)
	end if

	if options.airspeedcap == true
		DrawSpriteScreenFX(19, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(20, FX_INK, screen.xcenter, temp5)
	end if
	temp5 += 3

	temp5 += 25
	if object.selection == CONFIGSCREEN_SEL_S1SPIKES
		DrawSpriteScreenFX(37, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(36, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.SpikeOnSelected == true
		DrawSpriteScreenFX(14, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(13, FX_INK, screen.xcenter, temp5)
	end if

	if object.SpikeOffSelected == true
		DrawSpriteScreenFX(16, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(15, FX_INK, screen.xcenter, temp5)
	end if

	if options.spikeBehavior == true
		DrawSpriteScreenFX(19, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(20, FX_INK, screen.xcenter, temp5)
	end if
	temp5 += 3

	temp5 += 25
	if object.selection == CONFIGSCREEN_SEL_ITEMS
		DrawSpriteScreenFX(8, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(7, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.prevItemsSelected == true
		DrawSpriteScreenFX(10, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(9, FX_INK, screen.xcenter, temp5)
	end if

	if object.nextItemsSelected == true
		DrawSpriteScreenFX(12, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(11, FX_INK, screen.xcenter, temp5)
	end if

#platform: USE_ORIGINS
	switch options.shieldType
	case SHIELDTYPE_S1
		DrawSpriteScreenFX(32, FX_INK, screen.xcenter, temp5)
		break

	case SHIELDTYPE_S2
		DrawSpriteScreenFX(33, FX_INK, screen.xcenter, temp5)
		break

	case SHIELDTYPE_S3_S1
		DrawSpriteScreenFX(34, FX_INK, screen.xcenter, temp5)
		break

	case SHIELDTYPE_S3_S2
		DrawSpriteScreenFX(35, FX_INK, screen.xcenter, temp5)
		break
	end switch
#endplatform
	temp5 += 3

	temp5 += 25
	if object.selection == CONFIGSCREEN_SEL_EMERALDS
		DrawSpriteScreenFX(39, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(38, FX_INK, screen.xcenter, temp5)
	end if
	temp5 -= 3
	if object.Emerald6Selected == true
		DrawSpriteScreenFX(41, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(40, FX_INK, screen.xcenter, temp5)
	end if

	if object.Emerald7Selected == true
		DrawSpriteScreenFX(43, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(42, FX_INK, screen.xcenter, temp5)
	end if

	if options.superStates == false
		DrawSpriteScreenFX(19, FX_INK, screen.xcenter, temp5)
	else
		DrawSpriteScreenFX(20, FX_INK, screen.xcenter, temp5)
	end if
	temp5 += 3

	temp0 = object.timer
	temp0 >>= 1
	temp0 &= 1
	temp0 += 17
	if object.okSelected == true
		temp0 = 18
	end if
	DrawSpriteScreenFX(temp0, FX_INK, screen.xcenter, 195)

	if options.physicalControls == true
		if object.selection == CONFIGSCREEN_SEL_OK
			if object.state != CONFIGSCREEN_SELECTEDDELAY
				DrawSpriteScreenFX(21, FX_INK, screen.xcenter, 195)
			end if
		end if
	end if
	
	if object.isClassicLvlSel == true
		SetActivePalette(1, 0, screen.ysize)
	end if
end event


event ObjectStartup
	LoadSpriteSheet("LevelSelect/Icons.gif")
	SpriteFrame(-52, 0, 104, 7, 35, 255)	// GAME CONFIG text - #0

	SpriteFrame(-82, 0, 64,7, 35, 271)		// PLAYER text 				- #1
	SpriteFrame(-82, 0, 64,7, 100, 271)	// PLAYER text (Selected)	- #2
	SpriteFrame(-82, 0, 56, 7, 35, 279)	// GND CAP text 				- #3
	SpriteFrame(-82, 0, 56, 7, 92, 279)	// GND CAP text (Selected) 	- #4
	SpriteFrame(-82, 0, 56, 7, 35, 287)	// AIR CAP text 				- #5
	SpriteFrame(-82, 0, 56, 7, 92, 287)	// AIR CAP text (Selected) 	- #6
	SpriteFrame(-82, 0, 40, 7, 35, 263)	// ITEMS text 				- #7
	SpriteFrame(-82, 0, 40, 7, 84, 263)	// ITEMS text (Selected) 	- #8

	SpriteFrame(-16, 0, 20, 20, 138, 22)	// Left				- #9
	SpriteFrame(-16, 0, 20, 20, 138, 64)	// Left (Selected)	- #10
	SpriteFrame(64, 0, 20, 20, 159, 22)		// Right			- #11
	SpriteFrame(64, 0, 20, 20, 159, 64)		// Right (Selected)	- #12

	SpriteFrame(-8, 0, 40, 20, 1, 411)		// ON 				- #13
	SpriteFrame(-8, 0, 40, 20, 42, 411)		// ON (Selected) 	- #14
	SpriteFrame(44, 0, 40, 20, 1, 432)		// OFF 				- #15
	SpriteFrame(44, 0, 40, 20, 42, 432)		// OFF (Selected) 	- #16
	SpriteFrame(-20, 0, 40, 20, 1, 320) 	// OK 				- #17
	SpriteFrame(-20, 0, 40, 20, 42, 320) 	// OK (Selected) 	- #18
	SpriteFrame(-10, -2, 42, 22, 1, 362)	// Back 			- #19
	SpriteFrame(42, -2, 42, 22, 1, 362) 	// Back (Selected) 	- #20
	SpriteFrame(-22, -2, 42, 22, 1, 362)	// Selection Box	- #21

	SpriteFrame(16, 0, 16, 23, 46, 386)		// Sonic (Alone) 		- #22
	SpriteFrame(36, 0, 16, 23, 63, 386)		// Tails (Alone) 		- #23
	SpriteFrame(26, 0, 16, 23, 46, 386)		// Sonic (& Tails) 		- #24
	SpriteFrame(26, 0, 16, 23, 63, 386)		// Tails 	(& Sonic) 	- #25
	SpriteFrame(26, 0, 16, 23, 80, 386)		// Knuckles (Alone) 	- #26
	SpriteFrame(16, 0, 16, 23, 80, 386)		// Knuckles (& Tails) 	- #27
	SpriteFrame(36, 0, 16, 23, 63, 386)		// Tails 	(& Knux) 	- #28
#platform: USE_ORIGINS
	SpriteFrame(25, 1, 17, 22, 83, 410)		// Amy (Alone) 			- #29
	SpriteFrame(17, 1, 17, 22, 83, 410)		// Amy (& Tails) 		- #30
	SpriteFrame(36, 0, 16, 23, 63, 386)		// Tails (& Amy) 		- #31
#endplatform
	
	SpriteFrame(26, 2, 16, 16, 1, 255)		// Shields (S1)	- #29/32
	SpriteFrame(26, 2, 16, 16, 1, 272)		// Shields (S2)	- #30/33
	SpriteFrame(18, 2, 33, 16, 1, 255)		// Shields (S1+S3)	- #31/34
	SpriteFrame(18, 2, 33, 16, 1, 272)	// Shields (S2+S3)	- #32/35

	SpriteFrame(-82, 0, 69, 7, 35, 295)	// SPIKE text 				- #33/36
	SpriteFrame(-82, 0, 69, 7, 105, 295)	// SPIKE text (Selected) 	- #34/37
	SpriteFrame(-82, 0, 64, 7, 35, 303)	// EMERALD text 			- #35/38
	SpriteFrame(-82, 0, 64, 7, 100, 303)	// EMERALD text (Selected) 	- #36/39
	SpriteFrame(-8, 0, 40, 20, 23, 453)		// 6 				- #40
	SpriteFrame(-8, 0, 40, 20, 42, 411)		// 6 (Selected) 	- #41
	SpriteFrame(44, 0, 40, 20, 64, 453)		// 7 				- #42
	SpriteFrame(44, 0, 40, 20, 42, 432)		// 7 (Selected) 	- #43
end event


// ========================
// Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
