// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Menu Control Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.timer
private alias object.value1 : object.scrollDelayUp
private alias object.value2 : object.scrollDelayDown
private alias object.value3 : object.currentSelection
private alias object.value4 : object.soundTestCooldown

// States
private alias 0 : MENUCONTROL_INIT
private alias 1 : MENUCONTROL_FADEIN
private alias 2 : MENUCONTROL_SELECTING
private alias 3 : MENUCONTROL_LOADLEVEL
private alias 4 : MENUCONTROL_LOADSPECIAL
private alias 5 : MENUCONTROL_EXITTOTITLE

// The maximum number of selections available
private alias 20 : MAX_SELECTION_COUNT

private alias 71 : ENTRY_SOUNDTEST

// Player IDs
private alias 0 : CONFIGSCREEN_PLAYER_S
private alias 1 : CONFIGSCREEN_PLAYER_T
private alias 2 : CONFIGSCREEN_PLAYER_K
// Origins Plus Player IDs
private alias 3 : CONFIGSCREEN_PLAYER_A

private alias 4 : CONFIGSCREEN_PLAYER_ST

private alias 5 : CONFIGSCREEN_PLAYER_KT

// Origins Plus Player IDs
//private alias 5 : CONFIGSCREEN_PLAYER_KT_O
private alias 6 : CONFIGSCREEN_PLAYER_AT

// HexNo Aliases
private alias object.value0 : hexNo.number
private alias object.value1 : hexNo.highlighted

private alias 0  : HEXNO_HIGHLIGHT_FALSE
private alias 16 : HEXNO_HIGHLIGHT_TRUE

// Shield Type Aliases
private alias 0 : SHIELDTYPE_S1
private alias 1 : SHIELDTYPE_S2
private alias 2 : SHIELDTYPE_S3_S1
private alias 3 : SHIELDTYPE_S3_S2

// Player List Pos Aliases
public alias 0 : PLAYER_SONIC_A
public alias 1 : PLAYER_TAILS_A
public alias 2 : PLAYER_KNUCKLES_A
public alias 3 : PLAYER_SONIC_TAILS_A
public alias 4 : PLAYER_KNUCKLES_TAILS_A
public alias 5 : PLAYER_AMY_A
public alias 6 : PLAYER_AMY_TAILS_A

// Music loops
private alias 635050 : MUSIC_LOOP_GHZ // 635970 in older S1 versions, changed some time around 1.0.7
private alias 99380  : MUSIC_LOOP_MZ
private alias 100712 : MUSIC_LOOP_SYZ // This is 101364 in the normal stage...
private alias 84444  : MUSIC_LOOP_LZ
private alias 84364  : MUSIC_LOOP_SLZ
private alias 1      : MUSIC_LOOP_SBZ
private alias 84680  : MUSIC_LOOP_FINAL
private alias 39528  : MUSIC_LOOP_INV

// Music Event Aliases
private alias 25 : SLOT_MUSICEVENT_CHANGE

private alias 2 : MUSICEVENT_TRANSITION

// Secret aliases
public alias 0 : SECRET_MOONJUMP
public alias 1 : SECRET_HOUDINIMODE


// ========================
// Function Declarations
// ========================

reserve function MenuControl_HandleSecrets
reserve function MenuControl_PlaySong


// ========================
// Static Values
// ========================

public value  MenuControl_OptionsMenuOpen		= 0

private value MenuControl_OptionsMenuCodePos	= 0
private value MenuControl_DebugCheatCodePos 	= 0
private value MenuControl_EmeraldCheatCodePos 	= 0

private value MenuControl_MoonJumpCodePos		= 0
private value MenuControl_HoudiniModeCodePos 	= 0


// ========================
// Tables
// ========================

private alias 3 : CHEATLENGTH_OPTIONSMENU
private table MenuControl_OptionsMenu
	0, 0, 0
end table

private alias 8 : CHEATLENGTH_DEBUGMODE
private table MenuControl_DebugModeCheatCode
	1, 9, 9, 1, 0, 6, 2, 3
end table

private alias 4 : CHEATLENGTH_EMERALDS
private table MenuControl_EmeraldsCheatCode
	4, 1, 2, 6
end table

private alias 8 : CHEATLENGTH_MOONJUMP
private table MenuControl_MoonJumpCode
	2, 0, 2, 3, 1, 0, 2, 5
end table

private alias 8 : CHEATLENGTH_HOUDINIMODE
private table MenuControl_HoudiniModeCode
	2, 0, 1, 0, 0, 3, 2, 6
end table

// This table holds data for every stage with six values for every stage,
// -> First entry is menu table the stage option is on
// -> Second is what number this one is on the list, from top to bottom
// -> Third is the active stage list the stage is on
// -> Fourth is the stage's position in the stage list
// -> Fifth is the menu entry of what is on the opposite side of this selection, like how SBZ is to the right of GHZ and vice versa
//      -> For "special" selections (like settings) this value is instead used to hold a special ID
// -> Sixth is the icon the entry uses (based on Sprite Frames in the BG Animation object)
private table MenuControl_EntryTable
    0,  0, 1, 0,  15, 1     // 0  - GHZ 1
    0,  1, 1, 1,  16, 1     // 1  - GHZ 2
    0,  2, 1, 2,  17, 1     // 2  - GHZ 3
    0,  4, 1, 3,  18, 2     // 3  - MZ 1
    0,  5, 1, 4,  18, 2     // 4  - MZ 2
    0,  6, 1, 5,  18, 2     // 5  - MZ 3
    0,  8, 1, 6,  19, 3     // 6  - SYZ 1
    0,  9, 1, 7,  19, 3     // 7  - SYZ 2
    0, 10, 1, 8,  19, 3     // 8  - SYZ 3
    0, 12, 1, 9,  20, 4     // 9  - LZ 1
    0, 13, 1, 10, 20, 4     // 10 - LZ 2
    0, 14, 1, 11, 20, 4     // 11 - LZ 3
    0, 16, 1, 12, 20, 5     // 12 - SLZ 1
    0, 17, 1, 13, 20, 5     // 13 - SLZ 2
    0, 18, 1, 14, 20, 5     // 14 - SLZ 3
    1,  0, 1, 15,  0, 6     // 15 - SBZ 1
    1,  1, 1, 16,  1, 6     // 16 - SBZ 2
    1,  2, 1, 17,  2, 6     // 17 - SBZ 3
    1,  4, 1, 18,  3, 7     // 18 - Final Zone
    1,  8, 2,  0,  6, 8     // 19 - Special Stage
    1, 12, 0,  0, 71, 0     // 20 - Sound Test
end table


// ========================
// Function Definitions
// ========================

private function ConfigScreen_SetPlayer
#platform: USE_ORIGINS
	// Introduced in Origins Plus
	
	switch object.playerID
	case CONFIGSCREEN_PLAYER_S
		stage.playerListPos = PLAYER_SONIC_A
		stage.player2Enabled = false
		break
		
	case CONFIGSCREEN_PLAYER_T
		stage.playerListPos = PLAYER_TAILS_A
		stage.player2Enabled = false
		break
		
	case CONFIGSCREEN_PLAYER_K
		stage.playerListPos = PLAYER_KNUCKLES_A
		stage.player2Enabled = false
		break
		
	case CONFIGSCREEN_PLAYER_A
		stage.playerListPos = PLAYER_AMY_A
		stage.player2Enabled = false
		break

	case CONFIGSCREEN_PLAYER_ST
		stage.playerListPos = PLAYER_SONIC_TAILS_A
		break

	case CONFIGSCREEN_PLAYER_KT
		stage.playerListPos = PLAYER_KNUCKLES_A
		stage.player2Enabled = true
		break
		
	case CONFIGSCREEN_PLAYER_AT
		stage.playerListPos = PLAYER_AMY_TAILS_A
		break
	end switch
#endplatform
end function

private function MenuControl_HandleSecrets
	if hexNo[+2].number < 8
		SetTableValue(hexNo[+2].number, 117, MenuControl_EntryTable)
	end if

	// Handle the options menu check
	GetTableValue(temp0, MenuControl_OptionsMenuCodePos, MenuControl_OptionsMenu)

	if temp0 == hexNo[+2].number
#platform: USE_ORIGINS
		if game.playMode != BOOT_PLAYMODE_CLASSIC
#end platform
			MenuControl_OptionsMenuCodePos++
			if MenuControl_OptionsMenuCodePos == CHEATLENGTH_OPTIONSMENU
				MenuControl_OptionsMenuCodePos = 0
				CreateTempObject(TypeName[Config Screen], 0, 0, 0)
				MenuControl_OptionsMenuOpen = true
	
				PlaySfx(SfxName[Resume], false)
			end if
#platform: USE_ORIGINS
		end if
#end platform
	else
		MenuControl_OptionsMenuCodePos = 0
	end if

	GetTableValue(temp0, MenuControl_DebugCheatCodePos, MenuControl_DebugModeCheatCode)
	if temp0 == hexNo[+2].number
		MenuControl_DebugCheatCodePos++
		if MenuControl_DebugCheatCodePos == CHEATLENGTH_DEBUGMODE
			MenuControl_DebugCheatCodePos = 0
			stage.debugMode = true
			PlaySfx(SfxName[Ring L], false)
		end if
	else
		MenuControl_DebugCheatCodePos = 0
	end if

	GetTableValue(temp0, MenuControl_EmeraldCheatCodePos, MenuControl_EmeraldsCheatCode)
	if temp0 == hexNo[+2].number
		MenuControl_EmeraldCheatCodePos++
		if MenuControl_EmeraldCheatCodePos == CHEATLENGTH_EMERALDS
			MenuControl_EmeraldCheatCodePos = 0
			if options.superStates == true
				// Give the player all seven emeralds
				specialStage.emeralds = 0x7F
			else
				// Only give the player 6 emeralds, as the seventh one shouldn't really exist
				specialStage.emeralds = 0x3F
				specialStage.listPos = 6
			end if

			PlaySfx(SfxName[Emerald], false)
			StopMusic()
		end if
	else
		MenuControl_EmeraldCheatCodePos = 0
	end if
	
	if game.playMode != BOOT_PLAYMODE_CLASSIC	// can't play as Tails in Classic mode, so this is irrelevant
		GetTableValue(temp0, MenuControl_MoonJumpCodePos, MenuControl_MoonJumpCode)
		if temp0 == hexNo[+2].number
			MenuControl_MoonJumpCodePos++
			if MenuControl_MoonJumpCodePos == CHEATLENGTH_MOONJUMP
				MenuControl_MoonJumpCodePos = 0
				SetBit(secrets, SECRET_MOONJUMP, true)
				PlaySfx(SfxName[Ring L], false)
			end if
		else
			MenuControl_MoonJumpCodePos = 0
		end if
	end if

	GetTableValue(temp0, MenuControl_HoudiniModeCodePos, MenuControl_HoudiniModeCode)
	if temp0 == hexNo[+2].number
		MenuControl_HoudiniModeCodePos++
		if MenuControl_HoudiniModeCodePos == CHEATLENGTH_HOUDINIMODE
			MenuControl_HoudiniModeCodePos = 0
			SetBit(secrets, SECRET_HOUDINIMODE, true)
			PlaySfx(SfxName[Ring L], false)
		end if
	else
		MenuControl_HoudiniModeCodePos = 0
	end if
end function


private function MenuControl_PlaySong
	// Don't allow playing of songs in quick succession
	if object.soundTestCooldown == 0
		object.soundTestCooldown = 30

		switch hexNo[+2].number
		case 0
			//StopMusic()
			break

		case 1
			SetMusicTrack("GreenHill.ogg", 0, MUSIC_LOOP_GHZ)
			PlayMusic(0)
			break

		case 2
			SetMusicTrack("Marble.ogg", 0, MUSIC_LOOP_MZ)
			PlayMusic(0)
			break

		case 3
			SetMusicTrack("SpringYard.ogg", 0, MUSIC_LOOP_SYZ)
			PlayMusic(0)
			break

		case 4
			SetMusicTrack("Labyrinth.ogg", 0, MUSIC_LOOP_LZ)
			PlayMusic(0)
			break

		case 5
			SetMusicTrack("Starlight.ogg", 0, MUSIC_LOOP_SLZ)
			PlayMusic(0)
			break

		case 6
			SetMusicTrack("ScrapBrain.ogg", 0, MUSIC_LOOP_SBZ)
			PlayMusic(0)
			break

		case 7
			SetMusicTrack("Invincibility.ogg", 0, MUSIC_LOOP_INV)
			PlayMusic(0)
			break

		case 8
			PlaySfx(SfxName[Life], false)
			PauseMusic()
			ResetObjectEntity(SLOT_MUSICEVENT_CHANGE, TypeName[Music Event], MUSICEVENT_TRANSITION, 0, 0)
			object[SLOT_MUSICEVENT_CHANGE].priority = PRIORITY_ACTIVE
			break

		case 9
			SetMusicTrack("SpecialStage.ogg", 0, true)
			PlayMusic(0)
			break

		case 10
			SetMusicTrack("Titlescreen.ogg", 0, false)
			PlayMusic(0)
			break

		case 11
			SetMusicTrack("Ending.ogg", 0, false)
			PlayMusic(0)
			break

		case 12
			SetMusicTrack("Boss.ogg", 0, true)
			PlayMusic(0)
			break

		case 13
			SetMusicTrack("Final.ogg", 0, MUSIC_LOOP_FINAL)
			PlayMusic(0)
			break

		case 14
			SetMusicTrack("ActComplete.ogg", 0, false)
			PlayMusic(0)
			break

		case 15
			SetMusicTrack("GameOver.ogg", 0, false)
			PlayMusic(0)
			break

		case 16
			SetMusicTrack("Continue.ogg", 0, false)
			PlayMusic(0)
			break

		case 17
			SetMusicTrack("Credits.ogg", 0, false)
			PlayMusic(0)
			break

		case 18
			SetMusicTrack("Drowning.ogg", 0, false)
			PlayMusic(0)
			break
			
		end switch
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	// Set up the positions of the two HexNo objects
	// (Not sure why this can't be in INIT like the ypos setup, but if you really wanna ig)
	object[+1].xpos = screen.xcenter
	object[+1].xpos += 108
	object[+2].xpos = object[+1].xpos

	switch object.state
	case MENUCONTROL_INIT
		object.playerID = 0
		object.timer = 320

		SetScreenFade(0, 0, 0, object.timer)

		// Setup the next HexNo object's position

		object[+2].ypos = 121
		object[+2].priority = PRIORITY_ACTIVE
		
		CallFunction(ConfigScreen_SetPlayer)

		object.state++
		break

	case MENUCONTROL_FADEIN
		if object.timer > 0
			object.timer -= 16
		else
			PlayMusic(0)
			object.state++
		end if

		SetScreenFade(0, 0, 0, object.timer)
		break

	case MENUCONTROL_SELECTING
		if MenuControl_optionsMenuOpen == false
			if keyDown[0].down == true
				object.scrollDelayUp = 0
				object.scrollDelayDown++

				if object.scrollDelayDown == 1
					object.currentSelection++
				end if

				object.scrollDelayDown %= 12
			else

				if keyDown[0].up == true
					object.scrollDelayDown = 0

					object.scrollDelayUp++
					if object.scrollDelayUp == 1
						object.currentSelection--
					end if

					object.scrollDelayUp %= 12
				else
					object.scrollDelayUp = 0
					object.scrollDelayDown = 0
				end if
			end if

			// Loop back if max count reached
			if object.currentSelection > MAX_SELECTION_COUNT
				object.currentSelection = 0
			end if

			// Go back to mex if player if trying to go back from the first entry
			// Editor's note: that typo is racist
			if object.currentSelection < 0
				object.currentSelection = MAX_SELECTION_COUNT
			end if

			// Get info about the current selection
			temp0 = object.currentSelection
			temp0 *= 6
			temp0++

			// Get what row the selection is in
			GetTableValue(temp2, temp0, MenuControl_EntryTable)
			temp0 += 3

			// Get the selection's special ID (will return a normal value if it's a normal selection)
			GetTableValue(temp1, temp0, MenuControl_EntryTable)

			// Switch statement based on the entry's special ID
			switch temp1
			default
				// Default - anything that isn't an option or sound test will end up here
				checkResult = keyPress[0].left
				checkResult |= keyPress[0].right

				if checkResult == true
					object.currentSelection = temp1
				end if

				hexNo[+1].highlighted = HEXNO_HIGHLIGHT_FALSE
				hexNo[+2].highlighted = HEXNO_HIGHLIGHT_FALSE

				if keyPress[0].buttonA == true
					keyPress[0].start = true
				end if
				break

			case ENTRY_SOUNDTEST
				// Sound test
				if object.soundTestCooldown > 0
					object.soundTestCooldown--
				end if

				hexNo[+1].highlighted = HEXNO_HIGHLIGHT_FALSE
				hexNo[+2].highlighted = HEXNO_HIGHLIGHT_TRUE


				//if keyPress[0].buttonC == true
				//	// Add 16 to the count
				//	hexNo[+2].number += 16
				//end if

				if keyPress[0].left == true
					hexNo[+2].number--
				end if

				if keyPress[0].right == true
					hexNo[+2].number++
				end if

				// There are only 32 entries
				hexNo[+2].number &= 31

				if keyPress[0].buttonA == true
					CallFunction(MenuControl_PlaySong)
					CallFunction(MenuControl_HandleSecrets)
				end if

				//if keyPress[0].buttonB == true
				//	CallFunction(MenuControl_PlaySong)
				//	CallFunction(MenuControl_HandleSecrets)
				//end if
				break
				
			end switch

			temp0 = object.currentSelection
			temp0 *= 6

			// Get what menu the current selection is on
			GetTableValue(temp1, temp0, MenuControl_EntryTable)
			temp0++
			if temp1 == MENU_1
				menu2.selection = -1
				GetTableValue(menu1.selection, temp0, MenuControl_EntryTable)
			else // MENU_2
				menu1.selection = -1
				GetTableValue(menu2.selection, temp0, MenuControl_EntryTable)
			end if

			temp0 += 4

			// Get what picture the current selection should show
			GetTableValue(BGAnimation_currentPreview, temp0, MenuControl_EntryTable)

			// Check if the player wants to enter the level
			if keyPress[0].start == true
				// Special stage?
				if object.currentSelection == 19
					// Special fade for special stages
					PlaySfx(SfxName[Warp], false)
					object.state = MENUCONTROL_LOADSPECIAL
					fadeColor = 0xD0
					fadeColor <<= 16
					temp0 = 0xFF
					temp0 <<= 8
					fadeColor += temp0
					fadeColor += 0xE0
				else
					// Use the normal level loading routine
					object.state = MENUCONTROL_LOADLEVEL
				end if
			else
				// Check if the player wants to exit to title
				if keyPress[0].buttonB == true
					object.state = MENUCONTROL_EXITTOTITLE
				else
					if keyPress[1].buttonX == true
						if game.hasPlusDLC == false
							temp0 = 2
						else
							temp0 = 3
						end if
						if object.playerID < temp0
							object.playerID++
						else
							if object.playerID == 4
								object.playerID = 1
							else
								if object.playerID == 5
									if game.hasPlusDLC == false
										object.playerID = 4
									else	
										object.playerID = 6
									end if
								else
									if object.playerID == 6
										object.playerID = 4
									else
										object.playerID = 0
									end if
								end if
							end if
						end if
						//PlaySfx(SfxName[Menu Move], false)
#platform: USE_ORIGINS
						CallFunction(ConfigScreen_SetPlayer)
#endplatform
					end if

					if keyPress[1].buttonY == true
						switch object.playerID
							case 0
								object.playerID = 4
							break
							case 2
								object.playerID = 5
							break
							case 3
								object.playerID = 6
							break
							case 4
								object.playerID = 0
							break
							case 5
								object.playerID = 2
							break
							case 6
								object.playerID = 3
							break
						end switch
#platform: USE_ORIGINS
						CallFunction(ConfigScreen_SetPlayer)
#endplatform
					end if
				end if
			end if
		end if
		break

	case MENUCONTROL_LOADLEVEL // Black fade for entering a normal stage
		if object.timer < 0x100
			music.volume -= 10
			object.timer += 16
			SetScreenFade(0, 0, 0, object.timer)
		else
#platform: USE_ORIGINS
			CallNativeFunction2(NotifyCallback, NOTIFY_LEVEL_SELECT_MENU, true)
			CallNativeFunction2(NotifyCallback, NOTIFY_PLAYER_SET, stage.playerListPos)
#endplatform

			StopMusic()

			// Start getting info about the currently selected stage
			temp0 = object.currentSelection
			temp0 *= 6
			temp0 += 2

			// Get what stage list it's on
			GetTableValue(temp1, temp0, MenuControl_EntryTable)
			temp0++

			// And then get the stage's list pos
			GetTableValue(temp2, temp0, MenuControl_EntryTable)
			
			if temp1 == PRESENTATION_STAGE
				if temp2 == 0
					game.titleMode = true
				end if
			end if

			stage.activeList = temp1
			stage.listPos = temp2

			LoadStage()

			SetScreenFade(0x00, 0x00, 0x00, 0xFF)
		end if
		break

	case MENUCONTROL_LOADSPECIAL
		if object.timer < 768
			music.volume -= 10
			object.timer += 8
			SetScreenFade(0xD0, 0xFF, 0xE0, object.timer)
		else
			StopMusic()

			temp0 = object.currentSelection
			temp0 *= 6
			temp0 += 2

			// Get what stage list it's on
			GetTableValue(temp1, temp0, MenuControl_EntryTable)
			temp0++

			// And then get the stage's list position
			GetTableValue(temp2, temp0, MenuControl_EntryTable)

			stage.activeList = temp1
			stage.listPos = temp2

			LoadStage()

			SetScreenFade(0xD0, 0xFF, 0xE0, 0xFF)
		end if
		break

	case MENUCONTROL_EXITTOTITLE
		if object.timer < 0x100
			music.volume -= 10
			object.timer += 16
			SetScreenFade(0, 0, 0, object.timer)
		else

			StopMusic()

			stage.activeList = PRESENTATION_STAGE
			stage.listPos = 0
			
			game.titleMode = true

			LoadStage()
			
			SetScreenFade(0x00, 0x00, 0x00, 0xFF)
		end if
		break
		
	end switch
end event


event ObjectDraw
	temp0 = screen.xcenter
	temp0 -= 12
	DrawMenu(MENU_1, temp0, 25)

	temp0 = screen.xcenter
	temp0 += 132
	DrawMenu(MENU_2, temp0, 25)
end event


event ObjectStartup
	LoadSpriteSheet("LevelSelect/Text.gif")

 	// All Menu Control objects should be active
	// -> Note that there should only ever be one of them in a scene, though
	foreach (TypeName[Menu Control], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].priority = PRIORITY_ACTIVE
	next

#platform: USE_STANDALONE
	if stage.actNum < 3
		options.stageSelectFlag = true
	end if
#endplatform

	options.touchControls = false

	SetMusicTrack("SpecialStage.ogg", 0, true)

	// Setup menu 1 (left column)
	SetupMenu(MENU_1, 0, 3, 1)

	// Add the entries
	AddMenuEntry(MENU_1, "GREEN HILL@@ 1", true)
	AddMenuEntry(MENU_1, "2", false)
	AddMenuEntry(MENU_1, "3", false)
	AddMenuEntry(MENU_1, " ", false)
	AddMenuEntry(MENU_1, "MARBLE@@@@@@ 1", true)
	AddMenuEntry(MENU_1, "2", false)
	AddMenuEntry(MENU_1, "3", false)
	AddMenuEntry(MENU_1, " ", false)
	AddMenuEntry(MENU_1, "SPRING YARD@ 1", true)
	AddMenuEntry(MENU_1, "2", false)
	AddMenuEntry(MENU_1, "3", false)
	AddMenuEntry(MENU_1, " ", false)
	AddMenuEntry(MENU_1, "LABYRINTH@@@ 1", true)
	AddMenuEntry(MENU_1, "2", false)
	AddMenuEntry(MENU_1, "3", false)
	AddMenuEntry(MENU_1, " ", false)
	AddMenuEntry(MENU_1, "STAR LIGHT@@ 1", true)
	AddMenuEntry(MENU_1, "2", false)
	AddMenuEntry(MENU_1, "3", false)
	AddMenuEntry(MENU_1, " ", false)
	
	// Setup menu 2 (right column)
	SetupMenu(MENU_2, 0, 3, 1)
	
	// Add its entries
	AddMenuEntry(MENU_2, "SCRAP BRAIN@@@ 1", true)
	AddMenuEntry(MENU_2, "2", false)
	AddMenuEntry(MENU_2, "3", false)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, "FINAL@@@@@@@@@@ ", true)
	
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, "SPECIAL STAGE@@ ", true)


	// (Neat note - In initial S1 versions, spaces were used as placeholder letters rather than @'s)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, " ", false)
	AddMenuEntry(MENU_2, "SOUND TEST@ *@@*", true)

	menu1.selection =  0
	menu2.selection = -1
	
	// Not in the original, but origins compiler swaps the value of SPECIAL_STAGE to 2 (rather than 3 originally)
	temp0 = 19
	temp0 *= 6
	temp0 += 2
	SetTableValue(SPECIAL_STAGE, temp0, MenuControl_EntryTable)
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
