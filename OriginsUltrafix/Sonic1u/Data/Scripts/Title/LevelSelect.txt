// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Sonic Team Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.timer
private alias object.value1 : object.scrollDelayUp
private alias object.value2 : object.scrollDelayDown
private alias object.value3 : object.menuIndex
private alias object.value4 : object.soundTestIndex
private alias object.value5 : object.specialIndex

// States
private alias 0 : LEVSEL_INIT
private alias 1 : LEVSEL_SELECTING
private alias 2 : LEVSEL_FADETOSTAGE
private alias 3 : LEVSEL_FADETOSPECIAL
private alias 4 : LEVSEL_EXITTOTITLE

// Indexes
private alias 19 : INDEX_SPECIALSTAGE
private alias 20 : INDEX_SOUNDTEST

// Players
private alias 0 : PLAYER_SONIC_A
private alias 1 : PLAYER_TAILS_A
private alias 2 : PLAYER_KNUCKLES_A
private alias 3 : PLAYER_SONIC_TAILS_A
private alias 4 : PLAYER_KNUCKLES_TAILS_A
private alias 5 : PLAYER_AMY_A
private alias 6 : PLAYER_AMY_TAILS_A

// Config Screen aliases
private alias object.value4 : object.isClassicLvlSel

// Secret aliases
public alias 0 : SECRET_MOONJUMP
public alias 1 : SECRET_HOUDINIMODE

// Toggles
private alias 0 : ALLOWINCLASSIC_CHARSELECT		
private alias 0 : ALLOWINCLASSIC_GAMEOPTIONS	// note: not all of the options currently work in Classic mode, so if we enable this that will need to be fixed


// ========================
// Function Declarations
// ========================

reserve function LevelSelect_HandleSecrets


// ========================
// Static Values
// ========================

public value  MenuControl_OptionsMenuOpen		= 0

private value LevelSelect_OptionsMenuCodePos	= 0
private value LevelSelect_DebugCheatCodePos 	= 0
private value LevelSelect_EmeraldCheatCodePos 	= 0

private value LevelSelect_MoonJumpCodePos		= 0
private value LevelSelect_HoudiniModeCodePos 	= 0


// ========================
// Tables
// ========================

private alias 3 : CHEATLENGTH_OPTIONSMENU
private table LevelSelect_OptionsMenu
	0, 0, 0
end table

private alias 8 : CHEATLENGTH_DEBUGMODE
private table LevelSelect_DebugModeCheatCode
	1, 9, 9, 1, 0, 6, 2, 3
end table

private alias 4 : CHEATLENGTH_EMERALDS
private table LevelSelect_EmeraldsCheatCode
	4, 1, 2, 6
end table

private alias 8 : CHEATLENGTH_MOONJUMP
private table LevelSelect_MoonJumpCode
	2, 0, 2, 3, 1, 0, 2, 5
end table

private alias 8 : CHEATLENGTH_HOUDINIMODE
private table LevelSelect_HoudiniModeCode
	2, 0, 1, 0, 0, 3, 2, 6
end table


// ========================
// Function Definitions
// ========================

private function LevelSelect_HandleSecrets
	if object.soundTestIndex < 8
		object.specialIndex = object.soundTestIndex
	end if
	
	// Handle the options menu check
	GetTableValue(temp0, LevelSelect_OptionsMenuCodePos, LevelSelect_OptionsMenu)

	if temp0 == object.soundTestIndex
		CheckNotEqual(game.playMode, BOOT_PLAYMODE_CLASSIC)
		temp0 = checkResult
		CheckEqual(ALLOWINCLASSIC_GAMEOPTIONS, true)
		temp0 |= checkResult
		if checkResult == true
			LevelSelect_OptionsMenuCodePos++
			if LevelSelect_OptionsMenuCodePos == CHEATLENGTH_OPTIONSMENU
				LevelSelect_OptionsMenuCodePos = 0
				CreateTempObject(TypeName[Config Screen], 0, 0, 0)
				object[tempObjectPos].isClassicLvlSel = true
				MenuControl_OptionsMenuOpen = true
	
				PlaySfx(SfxName[Resume], false)
			end if
		end if
	else
		LevelSelect_OptionsMenuCodePos = 0
	end if

	GetTableValue(temp0, LevelSelect_DebugCheatCodePos, LevelSelect_DebugModeCheatCode)
	if temp0 == object.soundTestIndex
		LevelSelect_DebugCheatCodePos++
		if LevelSelect_DebugCheatCodePos == CHEATLENGTH_DEBUGMODE
			LevelSelect_DebugCheatCodePos = 0
			stage.debugMode = true
			PlaySfx(SfxName[Ring L], false)
		end if
	else
		LevelSelect_DebugCheatCodePos = 0
	end if

	GetTableValue(temp0, LevelSelect_EmeraldCheatCodePos, LevelSelect_EmeraldsCheatCode)
	if temp0 == object.soundTestIndex
		LevelSelect_EmeraldCheatCodePos++
		if LevelSelect_EmeraldCheatCodePos == CHEATLENGTH_EMERALDS
			LevelSelect_EmeraldCheatCodePos = 0
			if options.superStates == true
				// Give the player all seven emeralds
				specialStage.emeralds = 0x7F
			else
				// Only give the player 6 emeralds, as the seventh one shouldn't really exist
				specialStage.emeralds = 0x3F
				specialStage.listPos = 6
			end if

			PlaySfx(SfxName[Emerald], false)
			StopMusic()
		end if
	else
		LevelSelect_EmeraldCheatCodePos = 0
	end if

	if game.playMode != BOOT_PLAYMODE_CLASSIC	// can't play as Tails in Classic mode, so this is irrelevant
		GetTableValue(temp0, LevelSelect_MoonJumpCodePos, LevelSelect_MoonJumpCode)
		if temp0 == object.soundTestIndex
			LevelSelect_MoonJumpCodePos++
			if LevelSelect_MoonJumpCodePos == CHEATLENGTH_MOONJUMP
				LevelSelect_MoonJumpCodePos = 0
				SetBit(secrets, SECRET_MOONJUMP, true)
				PlaySfx(SfxName[Ring L], false)
			end if
		else
			LevelSelect_MoonJumpCodePos = 0
		end if
	end if

	GetTableValue(temp0, LevelSelect_HoudiniModeCodePos, LevelSelect_HoudiniModeCode)
	if temp0 == object.soundTestIndex
		LevelSelect_HoudiniModeCodePos++
		if LevelSelect_HoudiniModeCodePos == CHEATLENGTH_HOUDINIMODE
			LevelSelect_HoudiniModeCodePos = 0
			SetBit(secrets, SECRET_HOUDINIMODE, true)
			PlaySfx(SfxName[Ring L], false)
		end if
	else
		LevelSelect_HoudiniModeCodePos = 0
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	
	case LEVSEL_INIT
		MenuControl_OptionsMenuOpen			= false
		LevelSelect_OptionsMenuCodePos		= 0
		LevelSelect_DebugCheatCodePos 		= 0
		LevelSelect_EmeraldCheatCodePos 	= 0
		
		object.state++
		// fall through
	
	case LEVSEL_SELECTING
		if MenuControl_OptionsMenuOpen == false
			if keyDown[0].down == true
				object.scrollDelayUp = 0
				object.scrollDelayDown++
				
				if object.scrollDelayDown == 1
					object.menuIndex++
				end if
				
				object.scrollDelayDown %= 12
			else
				if keyDown[0].up == true
					object.scrollDelayDown = 0
					object.scrollDelayUp++
					
					if object.scrollDelayUp == 1
						object.menuIndex--
					end if
					
					object.scrollDelayUp %= 12
				else
					object.scrollDelayUp = 0
					object.scrollDelayDown = 0
				end if
			end if
			
			if object.menuIndex < 0
				object.menuIndex = 20
			end if
			object.menuIndex %= 21

			menu1.selection = object.menuIndex
			//if menu1.selection == 21	// idk what this is but it should never be possible anyway because 20 is the max
			//	menu1.selection++
			//end if

			if object.menuIndex == INDEX_SOUNDTEST
				temp0 = false
				
				if keyPress[0].left == true
					object.soundTestIndex--
					temp0 = true
				end if
				
				if keyPress[0].right == true
					object.soundTestIndex++
					temp0 = true
				end if
				
				while object.soundTestIndex < 0
					object.soundTestIndex += 0x20
				loop
				
				object.soundTestIndex %= 0x20
				
				if temp0 == true
					switch object.soundTestIndex
						case 0
							EditMenuEntry(MENU_1, "SOUND SELECT    00      ", INDEX_SOUNDTEST, 1)
							break
						case 1
							EditMenuEntry(MENU_1, "SOUND SELECT    01      ", INDEX_SOUNDTEST, 1)
							break
						case 2
							EditMenuEntry(MENU_1, "SOUND SELECT    02      ", INDEX_SOUNDTEST, 1)
							break
						case 3
							EditMenuEntry(MENU_1, "SOUND SELECT    03      ", INDEX_SOUNDTEST, 1)
							break
						case 4
							EditMenuEntry(MENU_1, "SOUND SELECT    04      ", INDEX_SOUNDTEST, 1)
							break
						case 5
							EditMenuEntry(MENU_1, "SOUND SELECT    05      ", INDEX_SOUNDTEST, 1)
							break
						case 6
							EditMenuEntry(MENU_1, "SOUND SELECT    06      ", INDEX_SOUNDTEST, 1)
							break
						case 7
							EditMenuEntry(MENU_1, "SOUND SELECT    07      ", INDEX_SOUNDTEST, 1)
							break
						case 8
							EditMenuEntry(MENU_1, "SOUND SELECT    08      ", INDEX_SOUNDTEST, 1)
							break
						case 9
							EditMenuEntry(MENU_1, "SOUND SELECT    09      ", INDEX_SOUNDTEST, 1)
							break
						case 10
							EditMenuEntry(MENU_1, "SOUND SELECT    0A      ", INDEX_SOUNDTEST, 1)
							break
						case 11
							EditMenuEntry(MENU_1, "SOUND SELECT    0B      ", INDEX_SOUNDTEST, 1)
							break
						case 12
							EditMenuEntry(MENU_1, "SOUND SELECT    0C      ", INDEX_SOUNDTEST, 1)
							break
						case 13
							EditMenuEntry(MENU_1, "SOUND SELECT    0D      ", INDEX_SOUNDTEST, 1)
							break
						case 14
							EditMenuEntry(MENU_1, "SOUND SELECT    0E      ", INDEX_SOUNDTEST, 1)
							break
						case 15
							EditMenuEntry(MENU_1, "SOUND SELECT    0F      ", INDEX_SOUNDTEST, 1)
							break
						case 16
							EditMenuEntry(MENU_1, "SOUND SELECT    10      ", INDEX_SOUNDTEST, 1)
							break
						case 17
							EditMenuEntry(MENU_1, "SOUND SELECT    11      ", INDEX_SOUNDTEST, 1)
							break
						case 18
							EditMenuEntry(MENU_1, "SOUND SELECT    12      ", INDEX_SOUNDTEST, 1)
							break
						case 19
							EditMenuEntry(MENU_1, "SOUND SELECT    13      ", INDEX_SOUNDTEST, 1)
							break
						case 20
							EditMenuEntry(MENU_1, "SOUND SELECT    14      ", INDEX_SOUNDTEST, 1)
							break
						case 21
							EditMenuEntry(MENU_1, "SOUND SELECT    15      ", INDEX_SOUNDTEST, 1)
							break
						case 22
							EditMenuEntry(MENU_1, "SOUND SELECT    16      ", INDEX_SOUNDTEST, 1)
							break
						case 23
							EditMenuEntry(MENU_1, "SOUND SELECT    17      ", INDEX_SOUNDTEST, 1)
							break
						case 24
							EditMenuEntry(MENU_1, "SOUND SELECT    18      ", INDEX_SOUNDTEST, 1)
							break
						case 25
							EditMenuEntry(MENU_1, "SOUND SELECT    19      ", INDEX_SOUNDTEST, 1)
							break
						case 26
							EditMenuEntry(MENU_1, "SOUND SELECT    1A      ", INDEX_SOUNDTEST, 1)
							break
						case 27
							EditMenuEntry(MENU_1, "SOUND SELECT    1B      ", INDEX_SOUNDTEST, 1)
							break
						case 28
							EditMenuEntry(MENU_1, "SOUND SELECT    1C      ", INDEX_SOUNDTEST, 1)
							break
						case 29
							EditMenuEntry(MENU_1, "SOUND SELECT    1D      ", INDEX_SOUNDTEST, 1)
							break
						case 30
							EditMenuEntry(MENU_1, "SOUND SELECT    1E      ", INDEX_SOUNDTEST, 1)
							break
						case 31
							EditMenuEntry(MENU_1, "SOUND SELECT    1F      ", INDEX_SOUNDTEST, 1)
							break
					end switch
				end if
			end if

			CheckEqual(keyPress[0].buttonA, 1)
			temp0 = checkResult
			CheckEqual(keyPress[0].start, 1)
			temp0 |= checkResult
			if temp0 == true
				options.attractMode = 0
				switch object.menuIndex
					case INDEX_SPECIALSTAGE
						stage.activeList = SPECIAL_STAGE
						stage.listPos = object.specialIndex
						PlaySfx(SfxName[Warp], 0)
						object.state = LEVSEL_FADETOSPECIAL	
						break
						
					case INDEX_SOUNDTEST
						switch object.soundTestIndex
							case 1
								SetMusicTrack("GreenHill.ogg", 0, 0x9B0AA)
								PlayMusic(0)
								break
							case 2
								SetMusicTrack("Marble.ogg", 0, 0x18434)
								PlayMusic(0)
								break
							case 3
								SetMusicTrack("SpringYard.ogg", 0, 0x18968)
								PlayMusic(0)
								break
							case 4
								SetMusicTrack("Labyrinth.ogg", 0, 0x149DC)
								PlayMusic(0)
								
								break
							case 5
								SetMusicTrack("Starlight.ogg", 0, 0x1498C)
								PlayMusic(0)
								break
							case 6
								SetMusicTrack("ScrapBrain.ogg", 0, 1)
								PlayMusic(0)
								break
							case 7
								SetMusicTrack("Invincibility.ogg", 0, 0x9A68)
								PlayMusic(0)
								break
							case 8
								PlaySfx(SfxName[Life], 0)
								PauseMusic()
								ResetObjectEntity(25, TypeName[Music Event], 2, 0, 0)
								object[25].priority = PRIORITY_ACTIVE
								break
							case 9
								SetMusicTrack("SpecialStage.ogg", 0, 1)
								PlayMusic(0)
								break
							case 10
								SetMusicTrack("Titlescreen.ogg", 0, 0)
								PlayMusic(0)
								break
							case 11
								SetMusicTrack("Ending.ogg", 0, 0)
								PlayMusic(0)
								break
							case 12
								SetMusicTrack("Boss.ogg", 0, 1)
								PlayMusic(0)
								break
							case 13
								SetMusicTrack("Final.ogg", 0, 0x14AC8)
								PlayMusic(0)
								break
							case 14
								SetMusicTrack("ActComplete.ogg", 0, 0)
								PlayMusic(0)
								break
							case 15
								SetMusicTrack("GameOver.ogg", 0, 0)
								PlayMusic(0)
								break
							case 16
								SetMusicTrack("Continue.ogg", 0, 0)
								PlayMusic(0)
								break
							case 17
								SetMusicTrack("Credits.ogg", 0, 0)
								PlayMusic(0)
								break
							case 18
								SetMusicTrack("Drowning.ogg", 0, 0)
								PlayMusic(0)
								break
						end switch
						CallFunction(LevelSelect_HandleSecrets)
						
						break
						
					default
						stage.activeList = REGULAR_STAGE
						stage.listPos = object.menuIndex
						object.state = LEVSEL_FADETOSTAGE
						break
				end switch
			else
				if keyPress[0].buttonB == true
					object.state = LEVSEL_EXITTOTITLE
				else
					CheckNotEqual(game.playMode, BOOT_PLAYMODE_CLASSIC)
					temp0 = checkResult
					CheckEqual(ALLOWINCLASSIC_CHARSELECT, true)
					temp0 |= checkResult
					if checkResult == true
						if keyPress[1].buttonX == true
							if stage.playerListPos == PLAYER_KNUCKLES_A
								if game.hasPlusDLC == true
									stage.playerListPos = PLAYER_AMY_A
								else
									stage.playerListPos = PLAYER_SONIC_A
								end if
							else
								if stage.playerListPos == PLAYER_AMY_A
									stage.playerListPos = PLAYER_SONIC_A
								else
									stage.playerListPos++
							
									if stage.playerListPos == PLAYER_TAILS_A
										stage.player2Enabled = false
									end if
								end if
							end if
						end if
						
						if keyPress[1].buttonY == true
							if stage.playerListPos != PLAYER_TAILS_A
								stage.player2Enabled ^= 1
							end if
						end if
					end if
				end if
			end if
		end if
		
		break
	
	case LEVSEL_FADETOSTAGE
		if object.timer < 256
			music.volume -= 10
			object.timer += 16
			SetScreenFade(0, 0, 0, object.timer)
		else
			LoadStage()
			SetScreenFade(0, 0, 0, 255)
		end if
		
		break
	
	case LEVSEL_FADETOSPECIAL
		if object.timer < 768
			music.volume -= 10
			object.timer += 8
			SetScreenFade(255, 255, 255, object.timer)
		else
			StopMusic()
			LoadStage()
			SetScreenFade(255, 255, 255, 255)
		end if
		
		break

	case LEVSEL_EXITTOTITLE
		if object.timer < 0x100
			music.volume -= 10
			object.timer += 16
			SetScreenFade(0, 0, 0, object.timer)
		else
			game.titleMode = true

			LoadStage()
			
			SetScreenFade(0x00, 0x00, 0x00, 0xFF)
		end if
		break
	
	end switch
end event


event ObjectDraw
	DrawMenu(MENU_1, screen.xcenter, 40)
	
	CheckNotEqual(game.playMode, BOOT_PLAYMODE_CLASSIC)
	temp0 = checkResult
	CheckEqual(ALLOWINCLASSIC_CHARSELECT, true)
	temp0 |= checkResult
	if checkResult == true
		temp0 = screen.xcenter
		temp1 = screen.ycenter
		temp0 += 44
		temp1 += 68
		
		temp2 = stage.playerListPos
		if temp2 == PLAYER_AMY_A
			temp2 = 3
		end if
		
		DrawSpriteScreenXY(temp2, temp0, temp1)
		
		if stage.player2Enabled == true
			DrawSpriteScreenXY(4, temp0, temp1)
		end if
	end if
end event


event ObjectStartup
	LoadSpriteSheet("LevelSelect/TextOG.gif")
	
	SetupMenu(MENU_1, 0, 1, 2)
	AddMenuEntry(MENU_1, "GREEN HILL ZONE  STAGE 1", 1)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "MARBLE ZONE      STAGE 1", 0)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "SPRING YARD ZONE STAGE 1", 0)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "LABYRINTH ZONE   STAGE 1", 0)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "STAR LIGHT ZONE  STAGE 1", 0)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "SCRAP BRAIN ZONE STAGE 1", 0)
	AddMenuEntry(MENU_1, "                 STAGE 2", 0)
	AddMenuEntry(MENU_1, "                 STAGE 3", 0)
	AddMenuEntry(MENU_1, "FINAL ZONE              ", 0)
	AddMenuEntry(MENU_1, "SPECIAL STAGE           ", 0)
	AddMenuEntry(MENU_1, "SOUND SELECT    00      ", 0)
	
	menu1.selection = 0
	
	LoadPalette("LevelSel.act", 1, 0, 0, 256)
	LoadPalette("AnLvlSel.act", 2, 0, 0, 256)
	
	// the squad
	SpriteFrame(16, 0, 16, 23, 0, 233)		// Sonic			- #0
	SpriteFrame(16, 0, 16, 23, 17, 233)		// Tails 			- #1
	SpriteFrame(16, 0, 16, 23, 34, 233)		// Knuckles			- #2
	SpriteFrame(14, 1, 17, 22, 51, 234)		// Amy 				- #3
	SpriteFrame(36, 0, 16, 23, 17, 233)		// Partner Tails 	- #4
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Title/Title.gif")
	SpriteFrame(-76, -24, 148, 40, 174, 259)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event